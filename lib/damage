@name damage
@persist ThinkDelay CurrentTurret:wirelink Queue:array QueueParameters:table LastAttempt:entity #Confirmed

#[
    WIP
    Library made to make custom damage system possible. (Useful for example when recreating nocollide NPC contact damage).
    
    ###################################
    ##      made by deltamolfar      ##
    ##        Glory to Ukraine       ##
    ###################################
    
    This chip can be freely distributed between anyone you want, as long, as you keep the author credits.
    If you change anything in this code, don't expect me to help you.
]#

if( first() || duped() ){
    CurrentTurret = nowirelink()
    
    QueueParameters = table()
    Queue = array()
    
    LastAttempt = noentity()
    
    holoCreate(1)
    holoAlpha(1, 0)
    holoDisableShading(1, 1)
    holoEntity(1):propDraw(0)
    
    ThinkDelay = 50 # How fast should E2 try to execute?
    interval(ThinkDelay)
}

function dmglib_internal_resetTurret(){
    #CurrentTurret:entity():setAlpha(0)
    #CurrentTurret:entity():propDraw(0)
    #CurrentTurret:entity():propNotSolid(1)
    CurrentTurret:entity():setAng(ang(-90,0,0))
    
    CurrentTurret["Fire", number] = 0
    CurrentTurret["Force", number] = 0
    CurrentTurret["Damage", number] = 0
    CurrentTurret["NumBullets", number] = 1
    CurrentTurret["Delay", number] = ThinkDelay*0.01
    CurrentTurret["Sound", string] = ""
    CurrentTurret["Tracer", string] = ""
}

function entity:dmglib_InitTurret(){
    assert( This:isValid(), "dmglib_InitTurret(): Passed entity is not valid" )
    assert( This:owner()==owner(), "dmglib_InitTurret(): You don't own the passed entity" )
    assert( This:type()=="gmod_wire_turret", "dmglib_InitTurret(): Passed entity is not a wire turret" )
    
    CurrentTurret = This:wirelink()
    dmglib_internal_resetTurret()
}

function wirelink:dmglib_InitTurret(){
    local Ent = This:entity()
    
    assert( Ent:isValid(), "dmglib_InitTurret(): Passed entity is not valid" )
    assert( Ent:owner()==owner(), "dmglib_InitTurret(): You don't own the passed entity" )
    assert( Ent:type()=="gmod_wire_turret", "dmglib_InitTurret(): Passed entity is not a wire turret" )
    
    CurrentTurret = This
    dmglib_internal_resetTurret()
}

function dmglib_internal_setTable(Name:string){
    QueueParameters[Name, table] = table(
        "Damage" = 10,
        "Force" = 0,
        "Sound" = "",
        "Effect" = ""
    )
}

function array:dmglib_internal_QueueHasE(E:entity){
    return invert(This):exists(E:toString())
}

function array:dmglib_internal_QueueRemoveE(E:entity){
    local Index = invert(This)[E:toString(), number]
    
    if( Index!=0 ){
        This:remove(Index)
    }
    
    QueueParameters:removeTable(E:toString())
}

function entity:dmglib_internal_dealDamage(){
    if( !This:isValid() ){ return }
    local Parameters = QueueParameters[This:toString(), table]
    
    CurrentTurret["Fire", number] = 1
    CurrentTurret["Damage", number] = Parameters["Damage", number]
    CurrentTurret["Force", number] = Parameters["Force", number]
    
    CurrentTurret:entity():setPos(This:pos())
}

function entity:dmglib_internal_damageDealt(){
    if( !This:isValid() ){ return }
    local Parameters = QueueParameters[This:toString(), table]
    local EffectName = Parameters["Effect", string]
    
    holoPos(1, This:pos())
    holoEntity(1):emitSound(Parameters["Sound", string])
    
    #ifdef effect()
        local Effect = effect()
        Effect:setEntity(This)
        Effect:setOrigin(This:pos())
        Effect:setRadius(100)
        Effect:setMagnitude(1)
        
        Effect:play(EffectName)
    #endif
    
    CurrentTurret["Fire", number] = 0
    Queue:dmglib_internal_QueueRemoveE(LastAttempt)
    LastAttempt=noentity()
}

function entity:dmglib_damage(Args:array){
    assert(This:isValid(), "dmglib_dealDamage(r): Passed entity is not valid")
    if( !Queue:dmglib_internal_QueueHasE(This) ){ Queue:pushEntity(This) }
    
    local Name = This:toString()
    
    dmglib_internal_setTable(Name)
    
    local ArgsCount = Args:count()
    if( ArgsCount!=0 ){
        local Table = QueueParameters[Name, table]
        
        if( ArgsCount>=1 ){ Table["Damage", number] = Args[1, number] }
        if( ArgsCount>=2 ){ Table["Force", number] = Args[1, number] }
        if( ArgsCount>=3 ){ Table["Sound", string] = Args[1, string] }
        if( ArgsCount>=4 ){ Table["Effect", string] = Args[1, string] }
    }
}

if( clk() ){
    interval(ThinkDelay)
    
    if( Queue:count()>=1 ){
        if( LastAttempt==noentity() ){
            LastAttempt = Queue[1, entity]
        }
        
        CurrentTurret["Fire", number] = 0
        LastAttempt:dmglib_internal_dealDamage()
    }
}

event playerDisconnected(Player:entity) {
    if( Queue:dmglib_internal_QueueHasE(Player) ){
        CurrentTurret["Fire", number] = 0
        Queue:dmglib_internal_QueueRemoveE(LastAttempt)
        LastAttempt=noentity()
    }
}

event playerDeath(Victim:entity, Inflictor:entity, Attacker:entity) {
    if( Queue:dmglib_internal_QueueHasE(Victim) ){
        CurrentTurret["Fire", number] = 0
        Queue:dmglib_internal_QueueRemoveE(LastAttempt)
        LastAttempt=noentity()
    }
}

event entityDamage(Victim:entity, Damage:damage) {
    if( Victim==LastAttempt && !Victim:isValid() ){
        CurrentTurret["Fire", number] = 0
        Queue:dmglib_internal_QueueRemoveE(LastAttempt)
        LastAttempt=noentity()
    } elseif( Victim==LastAttempt && Damage:getInflictor()==CurrentTurret:entity() ){
        Victim:dmglib_internal_damageDealt()
    }
}
