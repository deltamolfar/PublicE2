@name InvisiMaker v2 by deltamolfar
@persist [Entities]:array
@persist SETTINGS_HINTDELAY SETTINGS_SELECTIONCOLOR:vector
#@strict

#[
    Chip made to turn multiple props invisible.
    It was made to be used on servers with color tool not being able to render props invisible (most of the time E2 still could).
    
    ###################################
    ##      made by deltamolfar      ##
    ##        Glory to Ukraine       ##
    ###################################
    
    This chip can be freely distributed between anyone you want, as long, as you keep the author credits.
    If you change anything in this code, don't expect me to help you.
]#

if( first() || dupefinished() ){
    SETTINGS_HINTDELAY = 4
    SETTINGS_SELECTIONCOLOR = vec(180,30,220)
    Entities = array()
    
    hint("To drop selection - use 'R'", SETTINGS_HINTDELAY)
    hint("To make selected props invisible - use 'MMB'", SETTINGS_HINTDELAY)
    hint("To select a prop - use 'RMB'", SETTINGS_HINTDELAY)
    
    function emitError(){
        owner():emitSound("buttons/button16.wav")    
    }
    
    function dropSelection(){
        if( Entities:count()==0 ){ hint("Can't drop selection, mo props selected!", SETTINGS_HINTDELAY) emitError() return }
        
        foreach(_, V:entity = Entities){
            V:setColor(V["Original_Color", vector], V["Original_Alpha", number])
        }
        
        hint( "Dropped "+Entities:count()+" selected props.", SETTINGS_HINTDELAY )
        
        Entities:clear()
    }
    
    function entity:addToSelection(){
        if( !This:isValid() ){ hint("Prop is not valid!", SETTINGS_HINTDELAY) emitError() return }
        if( This:owner()!=owner() && This:owner():trusts(owner()) ){ hint("You have no access to this prop!", SETTINGS_HINTDELAY) emitError() return }
        
        This["Original_Color", vector] = This:getColor()
        This["Original_Alpha", number] = This:getAlpha()
        
        This:setColor(SETTINGS_SELECTIONCOLOR, 255)
        
        Entities:pushEntity(This)
        
        hint(This:model()+" has been selected.", SETTINGS_HINTDELAY)
        owner():emitSound("buttons/lightswitch2.wav")
    }
    
    function makeInvisible(){
        if( Entities:count()==0 ){ hint("Can't make invisible, no props selected!", SETTINGS_HINTDELAY) emitError() return }
        
        foreach(_, V:entity = Entities){
            V:setColor(V["Original_Color", vector], 0)
        }
        
        hint( "Made "+Entities:count()+" props invisible.", SETTINGS_HINTDELAY )
        
        Entities:clear()
        
        owner():emitSound("buttons/button24.wav")
    }
}

event keyPressed(Player:entity, Key:string, Down:number, _:string) {
    if( Player!=owner() || !Down ){ exit() }
    
    switch(Key){
        case "mouse_right",
            owner():eyeTrace():entity():addToSelection()
        break
        case "mouse_middle",
            makeInvisible()
        break
        case "r",
            dropSelection()
        break    
    }
}
