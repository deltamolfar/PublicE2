@persist LIB_INTERNAL_UNITTEST_Stack:table
@persist LIB_INTERNAL_UNITTEST_Config:table
@persist LIB_INTERNAL_UNITTEST_Stats:table
@strict

#[
    Relatively simple unit tests library, that let you write simple unit tests, how cool is that? :D
    
    Wiki if you don't know what a unit test is:
    "Unit testing, a.k.a. component or module testing, is a form of software testing by which isolated source code is tested to validate expected behavior."
    
    "Unit generally implies a relatively small amount of code;
        code that can be isolated from the rest of a codebase which may be a large and complex system.
        In procedural programming, a unit is typically a function or a module.
        In object-oriented programming, a unit is typically a method, object or class."
        
    https://en.wikipedia.org/wiki/Unit_testing
    
    Usage:
    0) Import this library on any scope. (Ofc, global is scope is always recommended) (To include - put " #include"path/to/this/lib/unittest.txt" " outside of any if block/event/function)
    1) Register new unit tests using unittest_add(fss), or any of it's aliases.
        1a) unittest_add(
            function: Function to call, that should return a value.
            string: Expected return (no matter the type, just use toString(), or pass expected return directly, and this lib will do it for you).
            string: Name/Description - short summary of what are you doing/calling/expecting.
        1b) Example of adding a new unittests:
            unittest_add( function(){
                return entity():owner()
            }, owner(), " - I am owner of this E2!" )
            
            unittest_add( function(){
                return entity():owner()==world()
            }, 0, " - World doesn't own this Ew!" )
    2) After adding all your unittests, execute them using unittest_start().
        2a) You may also want to change, at what speed does this library perform unit tests. You can change it using unittsest_setPerf(n).
            n in unittsest_setPerf(n) means how much % OPS/CPU quota of your E2 can this lib use. (I recommend lowering it, only if you get lags of the game/crashes of the E2)
    3) Read summary in console. This library will (subjectively) beautifully output results of your tests in your console.
        3a) You will also get short summary in a form of hint after all tests are done.
        3b) You can watch how does your tests perform in a life mode, before every test is executed - in the console.
        
    Tips:
    - Remember to disable this lib's function calls/lib itself after you finished with development, in a same way as you should disable @strict.
        Either add it during development, and then delete it, make separate function/code block that you can comment/uncomment,
        or make separate file to test your E2, and then include it using #include, along with this library, if possible.
        Reason: During execution - this lib will use significant portion of resources. In "production" E2s, that may cause to crashes/unexpected behaviour.
        (You will also have unneccessary printouts)
        
        Tho during development, I would recommend to leave this library always enabled, as it can catch early bugs,
        or even let you create E2s using Test-driver development (https://en.wikipedia.org/wiki/Test-driven_development).
        
    WARNINGS:
    - This lib DOES NOT support:
        damage(xdm), movedata(xmv), gtable(xgt), rangers(xrd), matrix(xm2/xm4), usercommand(xuc), effect(xef), wirelink(xwl),
        or any other non-vanilla wiremod return types!
        
        Why? - They cannot be casted (transformed) to string directly (and this lib reiles on that).
        So what do I do? - If you need to test it, you may put custom tests inside it, or get string-able value out of it, and test it instead.
        Example:
        
            unittest_add( function(){
                return rangerOffset(50000, entity():toWorld(vec(0,0,100)), vec(0,0,-1)):entity()==entity()
            }, 1, " - This ranger will hit my E2!" )
            
    TODO:
    - Fix separate test's time-took bug (it's incorrect rn).
    - Make the total time-took a sum of all functions, rather then from start of all unit tests, to the end of it. (A lot of unrelated code is also being executed).
    - Make unit test groups.
    - Make function as a last argument, for ease of use.
    - If function have a number/string argument, it should pass unique id of the current unit test, for an easier name collision avoidance inside lambdas.
    - Make unittest_add() return unique id of the unit test + make unittest_run(ID:number)(which will run individual test) + make main loop don't delete, but archive/mark passed tests.
    
    - Solve catch execution causing crashes (or remove it's functionality).
    
    ###################################
    ##           UnitTests           ##
    ##      made by deltamolfar      ##
    ##        Glory to Ukraine       ##
    ###################################
    
    This chip can be freely distributed between anyone you want, as long, as you keep the author credits.
    If you want to change something, and help others, feel free to create an issue/PR.
    Source - https://github.com/deltamolfar/PublicE2/blob/main/libraries/unittest.txt
]#

#include "lib/supertimers"

if( first() || duped() ){
    LIB_INTERNAL_UNITTEST_Stack = table()
    LIB_INTERNAL_UNITTEST_Config = table(
        "FAIL_CALLBACK" = function(INFO:table){
            if( INFO["SUCCESSFUL_EXECUTION", number] ){
                printColorC(vec(255,150,150), "\n\n[UNIT-FAIL]", vec(255), ": "+INFO["NAME", string]+"\nExpected: "+INFO["EXPECTED", string]+"\nGot: "+INFO["RESULT", string], "\n")
            } else{
                printColorC(vec(255,150,150), "\n\n[UNIT-FAIL]", vec(255), ": "+INFO["NAME", string]+"\nSomething went wrong when executing a function!\nError: "+INFO["CATCH_ERROR", string], "\n")
            }
        },
        "SUCCESS_CALLBACK" = function(INFO:table){
            printColorC(vec(150,255,150), "\n\n[UNIT-SUCCESS]", vec(255), " - Name:"+INFO["NAME", string]+"\n    Took: ~", vec(255,255,0), floor((systime()-INFO["STARTTIME", number]*1000), 4), "\n")
        },
        "KNOWN_UNSUPPORTED_RETURN_TYPES" = array("xdm", "xgt", "xmv", "xrd", "xm2", "xm4", "xuc", "xef", "xwl"),
        "PERF" = 95
    )
    LIB_INTERNAL_UNITTEST_Stats = table(
        "STARTTIME" = 0,
        "SUCCESS" = 0,
        "FAIL" = 0
    )
}

function string lib_internal_unittest_getReturnAsString(Func:function){
    const Type = Func:getReturnType()
    
    switch( Type ){
        case "n",
            return (Func()[number]):toString()
        case "s",
            return (Func()[string])
        case "r",
            return (Func()[array]):toString()
        case "t",
            return (Func()[table]):toString()
        case "v",
            return (Func()[vector]):toString()
        case "xv2",
            return (Func()[vector2]):toString()
        case "xv4",
            return (Func()[vector4]):toString()
        case "q",
            return (Func()[quaternion]):toString()
        case "f",
            return (Func()[function]):toString()
        case "c",
            return (Func()[complex]):toString()
        case "e",
            return (Func()[entity]):toString()
        case "b",
            return toString(Func()[bone])
        case "xeo",
            return (Func()[egpobject]):toString()
        case "a",
            return (Func()[angle]):toString()
        default,
            assert(Type:length()!=0, "[UNITTEST]: NO RETURN TYPE DETECTED. Return type n,a,s,r,t,v,xv2,xv4,q,f,c,e,b,a,xeo was expected!")
            assert(0, "[UNITTEST]: UNKNOWN RETURN TYPE '"+Type+"'. Return type n,a,s,r,t,v,xv2,xv4,q,f,c,e,b,a,xeo was expected!")
    }
    
    return ""
}

function lib_internal_unittest_finish(){
    const TimeSpent = floor((systime()-LIB_INTERNAL_UNITTEST_Stats["STARTTIME", number])*1000, 2)+"ms"
    const SUCCESS = LIB_INTERNAL_UNITTEST_Stats["SUCCESS", number]
    const FAIL = LIB_INTERNAL_UNITTEST_Stats["FAIL", number]
    const TOTAL = SUCCESS+FAIL
    
    printColorC(
        vec(255),
        "\n\n",
        "----- [", vec(0,255,255), "FINISHED", vec(255), "] -----\n",
        "Stats:\n",
        "    ", vec(255,255,150), "Total tests: ", vec(255), TOTAL+"\n",
        "    ", vec(150,255,150), "Successes: ", SUCCESS==0 ? vec(255,0,0) : (FAIL==0 ? vec(0,255,0) : vec(255,255,0)), SUCCESS+"\n",
        "    ", vec(255,150,150), "Fails: ", FAIL==0 ? vec(0,255,0) : vec(255,0,0), FAIL+"\n",
        "    ", vec(255), "Success Ratio: ", lerp(vec(255,0,0), vec(0,255,0), SUCCESS/TOTAL), floor(SUCCESS/TOTAL*100, 2), vec(255), "%\n",
        "    ", "Time spent: "+TimeSpent,
        "\n\n\n\n"
    )
    
    if( FAIL==0 ){
        hint("[UNIT TEST]: Finished. All "+TOTAL+" tests passed! - "+TimeSpent, 7)
    } else{
        hint("[UNIT TEST]: Finished. (s:"+SUCCESS+"\\f:"+FAIL+") - "+TimeSpent+" Check console for details.", 7)
    }
    
    supertimer_destroy("!%&$UNITTEST")
}

function number unittest_getPerf(){
    return LIB_INTERNAL_UNITTEST_Config["PERF", number]
}

function unittsest_setPerf(Perf:number){
    LIB_INTERNAL_UNITTEST_Config["PERF", number] = clamp(Perf, 0, 100)
}

function number unittest_isrunning(){
    return supertimer_running("!%&$UNITTEST")
}

function number unittest_start(){
    if( supertimer_running("!%&$UNITTEST") ){ return 0 }
    
    if( !supertimer_exists("!%&$UNITTEST") ){
        supertimer("!%&$UNITTEST", 1, 0, function(){
            while( perf(LIB_INTERNAL_UNITTEST_Config["PERF", number]) && LIB_INTERNAL_UNITTEST_Stack:count()>0 ){
                const TestCase = LIB_INTERNAL_UNITTEST_Stack:popTable()
                const Name = TestCase["NAME", string]
                const StartTime = systime()
    
                try{
                    const ReturnValue = lib_internal_unittest_getReturnAsString(TestCase["FUNC", function])
                    
                    if( ReturnValue!=TestCase["EXPECT", string] ){
                        LIB_INTERNAL_UNITTEST_Stats["FAIL", number] = LIB_INTERNAL_UNITTEST_Stats["FAIL", number]+1
                        LIB_INTERNAL_UNITTEST_Config["FAIL_CALLBACK", function](table(
                            "SUCCESSFUL_EXECUTION" = 1,
                            "NAME" = TestCase["NAME", string],
                            "EXPECTED" = TestCase["EXPECT", string],
                            "RESULT" = ReturnValue
                        ))
                        continue
                    }
                    
                } catch(ERROR:string){ # Catch is broken. Will fix someday.
                    LIB_INTERNAL_UNITTEST_Stats["FAIL", number] = LIB_INTERNAL_UNITTEST_Stats["FAIL", number]+1
                    LIB_INTERNAL_UNITTEST_Config["FAIL_CALLBACK", function](table(
                        "SUCCESSFUL_EXECUTION" = 0,
                        #"NAME" = TestCase["NAME", string], #< For some reason - this results in compiler error. No idea.
                        "CATCH_ERROR" = "E2 Error. Which? - No idea. Compiler won't tell us. Good luck :D"
                    ))
                    continue
                }

                LIB_INTERNAL_UNITTEST_Stats["SUCCESS", number] = LIB_INTERNAL_UNITTEST_Stats["SUCCESS", number]+1
                LIB_INTERNAL_UNITTEST_Config["SUCCESS_CALLBACK", function](table(
                    "SUCCESSFUL_EXECUTION" = 1,
                    "NAME" = TestCase["NAME", string],
                    "STARTTIME" = StartTime
                ))
            }
            
            if( LIB_INTERNAL_UNITTEST_Stack:count()<=0 ){
                lib_internal_unittest_finish()
            }
        }, 0)
    }
    
    LIB_INTERNAL_UNITTEST_Stats["STARTTIME", number] = systime()
    supertimer_unpause("!%&$UNITTEST")
    
    return 1
}

# Not sure if you need it, but here you go ;/
function number unittest_stop(){
    if( !supertimer_running("!%&$UNITTEST") ){ return 0 }
    
    supertimer_pause("!%&$UNITTEST")
    
    return 1
}

function unittest_add(Unit:function, ExpectedReturn:string, Name:string){
    Name = Name:length()==0 ? Unit:toString()+" - No description given." : Unit:toString()+" - "+Name
    assert(LIB_INTERNAL_UNITTEST_Config["KNOWN_UNSUPPORTED_RETURN_TYPES", array]:indexOf(Unit:getReturnType())==0, "[UNITTEST]: RETURN TYPE '"+Unit:getReturnType()+"' IS NOT SUPPORTED!")
    
    LIB_INTERNAL_UNITTEST_Stack:insertTable(1, table(
        "FUNC" = Unit,
        "EXPECT" = ExpectedReturn,
        "NAME" = Name
    ) )
}

# --- Aliases ---
function unittest_add(Unit:function, ExpectedReturn:number, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:array, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:table, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:vector, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:vector2, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:vector4, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:quaternion, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:function, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:complex, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:entity, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:bone, Name:string){ unittest_add(Unit, toString(ExpectedReturn), Name) }
function unittest_add(Unit:function, ExpectedReturn:egpobject, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }
function unittest_add(Unit:function, ExpectedReturn:angle, Name:string){ unittest_add(Unit, ExpectedReturn:toString(), Name) }

function unittest_add(Unit:function, ExpectedReturn:string){ unittest_add(Unit, ExpectedReturn, "") }
function unittest_add(Unit:function, ExpectedReturn:number){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:array){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:table){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:vector){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:vector2){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:vector4){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:quaternion){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:function){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:complex){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:entity){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:bone){ unittest_add(Unit, toString(ExpectedReturn), "") }
function unittest_add(Unit:function, ExpectedReturn:egpobject){ unittest_add(Unit, ExpectedReturn:toString(), "") }
function unittest_add(Unit:function, ExpectedReturn:angle){ unittest_add(Unit, ExpectedReturn:toString(), "") }
