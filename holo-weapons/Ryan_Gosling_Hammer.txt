@name Drive's Ryan Gosling Hammer
@persist HOLO_Hammer:entity WeaponType:string

if( first() || dupefinished() ){
    HOLO_Hammer = noentity()
    WeaponType = "weapon_crowbar"
    
    function createModel_Hammer(){
        local SIZE = 0.5
        local OriginalPos = entity():pos()
        local OriginalAng = ang(0,0,0)
        
        local BodyColor4 = vec4(255,255,225, 255)
        local HammerColor4 = vec4(225,225,225, 255)
        
        HOLO_Hammer = holoCreate(1, OriginalPos, vec(SIZE*0.25, SIZE*0.25, SIZE*2.1), OriginalAng, BodyColor4, "models/holograms/hq_cylinder.mdl")
            holoMaterial(1, "gigaconvertedmats/woodwall009a")
        holoCreate(2, OriginalPos+vec(0,0,14)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.25), OriginalAng+ang(0,0,180), HammerColor4, "models/holograms/hq_cubinder.mdl")
        holoCreate(3, OriginalPos+vec(0,0,17)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.25), OriginalAng, HammerColor4, "models/holograms/cube.mdl")
        holoCreate(4, OriginalPos+vec(-2.25,0,17)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.125), OriginalAng+ang(-90,0,0), HammerColor4, "models/holograms/hq_cubinder.mdl")
        
        holoCreate(5, OriginalPos+vec(-4.75,0,17)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.3), OriginalAng+ang(-90,0,0), HammerColor4, "models/holograms/hq_cone.mdl")
        holoCreate(6, OriginalPos+vec(-3.25,0,17)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.3), OriginalAng+ang(90,0,0), HammerColor4, "models/holograms/hq_cone.mdl")
        holoCreate(7, OriginalPos+vec(-6.25,0,17)*SIZE, vec(SIZE*0.25, SIZE*0.25, SIZE*0.2), OriginalAng+ang(90,0,0), HammerColor4, "models/holograms/hq_cylinder.mdl")
        
        holoCreate(8, OriginalPos+vec(4.3,1.035,16.2)*SIZE, vec(SIZE*0.25, SIZE*0.075, SIZE*0.55), OriginalAng+ang(105,0,0), HammerColor4, "models/holograms/prism.mdl")
        holoCreate(9, OriginalPos+vec(4.3,-1.035,16.2)*SIZE, vec(SIZE*0.25, SIZE*0.075, SIZE*0.55), OriginalAng+ang(105,0,0), HammerColor4, "models/holograms/prism.mdl")
        
        for(I=2, 9){
            holoParent(I, 1)
            holoMaterial(I, "models/props_c17/metalladder001")
        }
        
        #for(I=1, 9){ holoVisible(I, owner(), 0) }
        
        local	OffsetVec = vec( 2, 0, 0 )
        local	OffsetAng = ang( 0, 180, 0 )
        local AttachmentName = "anim_attachment_rh"
        local Vector = owner():attachmentPos( AttachmentName )
        local Ang = owner():attachmentAng( AttachmentName )
        local AngPos = toWorldPosAng( OffsetVec, OffsetAng, Vector, Ang )
        
        holoParentAttachment(1, owner(), "anim_attachment_RH")
        
        holoPos( 1, AngPos[1,vector] )
        holoAng( 1, AngPos[2,angle] )
    }
    
    function hideModel_Hammer(){
        if( !HOLO_Hammer:isValid() ){ createModel_Hammer() }
        for(I=1, 9){ holoAlpha(I, 0) }
    }
    
    function showModel_Hammer(){
        if( !HOLO_Hammer:isValid() ){ createModel_Hammer() return }
        for(I=1, 9){ holoAlpha(I, 255) }
    }
}

event entityDamage(_:entity, Damage:damage) {
    local DmgAttacker = Damage:getAttacker()
    if( DmgAttacker:isValid() ){
        if( DmgAttacker==owner() && DmgAttacker:weapon():type()==WeaponType ){
            switch( randint(1, 3) ){
                case 1,
                    owner():emitSound("physics/metal/metal_canister_impact_soft1.wav")
                break
                case 2,
                    owner():emitSound("physics/metal/metal_canister_impact_soft2.wav")
                break
                case 3,
                    owner():emitSound("physics/metal/metal_canister_impact_soft3.wav")
                break
            }
        }
    }
}

event weaponSwitched(Player:entity, OldWeapon:entity, NewWeapon:entity) {
    if( Player!=owner() ){ exit() }
    
    if( OldWeapon:isValid() ){
        if( OldWeapon:type()==WeaponType ){
            hideModel_Hammer()
            exit()
        }
    }
    if( NewWeapon:isValid() ){
        if( NewWeapon:type()==WeaponType ){
            showModel_Hammer()
            NewWeapon:setAlpha(0)
            exit()
        }
    }
}
