@name SaintsRow Crowbar->Dick!
@persist [WeaponType]:string 
@strict

#[
    Chip made for being able to cosplay Saints Row main characters.
    
    ###################################
    ##      made by deltamolfar      ##
    ##        Glory to Ukraine       ##
    ###################################
    
    This chip can be freely distributed between anyone you want, as long, as you keep the author credits.
    If you change anything in this code, don't expect me to help you.
]#

if( first() || dupefinished() ){
    WeaponType="weapon_crowbar"
    
    local PinkColor = vec(255,0,191)
    local EntPos = entity():pos()
    
    #DickEnt = holoCreate(1)
    holoCreate(1)
    holoModel(1, "models/props_canal/mattpipe.mdl")
    holoPos(1, EntPos+vec(0,0,50))
    holoAng(1, ang(0,0,180))
    
    for(I=2, 4){holoCreate(I) holoColor(I, PinkColor) holoAng(I, ang(0,0,0)) holoParent(I, 1)}
    holoModel(2, "models/pac/jiggle/base_jiggle_3.mdl")
    holoPos(2, EntPos+vec(0,0,50))
    
    holoModel(3, "models/pac/default.mdl")
    holoPos(3, EntPos+vec(3,6,50))
    
    holoModel(4, "models/pac/default.mdl")
    holoPos(4, EntPos+vec(3,-6,50))
    
    holoPos(1, owner():attachmentPos("anim_attachment_RH"))
    holoAng(1, owner():attachmentAng("anim_attachment_RH")+ang(0,0,180))
    holoParentAttachment(1, owner(), "anim_attachment_RH")

    for(I=1, 4){holoAlpha(I, 0)}
    
    function string getRandomTaunt(Player:entity){
        local Phrase = randint(1, 19)
        switch(Phrase){
            case 1,
                return Player:name()+" just licked those pink balls!"
            case 2,
                return Player:name()+" stop being such a gay!"
            case 3,
                return Player:name()+" bro... You've really died to my dick?!"
            case 4,
                return "Ayo? Seems like "+Player:name()+" really likes taste of this dick :)"
            case 5,
                return Player:name()+"==PLAYER_TYPE[MEGA_NOOB];"
            case 6,
                return Player:name()+" not gg, but ez af."
            case 7,
                return Player:name()+" cry about it."
            case 8,
                return "Someone, tell "+Player:name()+" to stop sucking that much!"
            case 9,
                return Player:name()+" L+Ratio+No one asked+No bitches+You're adopted."
            case 10,
                return Player:name()+" Have you considered AimLabs?"
            case 11,
                return Player:name()+" Seems like you like this pink and sticky stuff :)"
            case 12,
                return Player:name()+" GET DICKED!"
            case 13,
                return Player:name()+" Get better."
            case 14,
                return Player:name()+" I hope your parents didn't see that!"
            case 15,
                return Player:name()+" Your mom just called. You're disgrace to all your family!"
            case 16,
                return Player:name()+" Your crush doesn't like you back!"
            case 17,
                return Player:name()+" Maybe try putting out a finger out of your ass next time."
            case 18,
                return Player:name()+" It's becoming borring at that point."
            case 19,
                return Player:name()+" 2 ez 4 me"
        }
        
        return ""
    }
    
}

event playerSpawn(Player:entity) {
    if( Player!=owner() || !Player:weapon():isValid() ){exit()}
    if( Player:weapon():type()==WeaponType ){for(I=1, 4){holoAlpha(I, 255)}}
}

event playerDeath(Victim:entity, _:entity, Attacker:entity) {
    if( Victim==owner() ){for(I=1, 4){holoAlpha(I, 0)}}
        
    if( Attacker!=owner() || !Attacker:weapon():isValid() ){ exit() }
    
    if( Attacker:weapon():type()==WeaponType ){
        concmd("say \""+getRandomTaunt(Victim)+"\"")
    }
}

event weaponSwitched(Player:entity, OldWeapon:entity, NewWeapon:entity) {
    if( Player!=owner() || !NewWeapon:isValid() || !OldWeapon:isValid() ){exit()}
    if( NewWeapon:type()==WeaponType ){
        NewWeapon:setAlpha(0)
        for(I=1, 4){holoAlpha(I, 255)}
    }
    elseif( OldWeapon:type()==WeaponType ){
        for(I=1, 4){holoAlpha(I, 0)}
    }
}




event entityDamage(_:entity, Damage:damage) {
    if( Damage:getInflictor()!=owner() || !owner():weapon():isValid() ){ exit() }
    if( owner():weapon():type() == WeaponType ){
        local RandInt = randint(1, 3)
        
        switch( RandInt ){
            case 1,
                owner():emitSound("physics/flesh/flesh_squishy_impact_hard2.wav")
            break
            case 2,
                owner():emitSound("physics/flesh/flesh_squishy_impact_hard3.wav")
            break
            case 3,
                owner():emitSound("physics/flesh/flesh_squishy_impact_hard4.wav")
            break    
        }
    }
}
